#!/usr/bin/python3
#
# bitcoin-submittx - Stand-alone transaction submitter
#
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.
#
# W.J. 2015 - based on "pynode" from https://github.com/jgarzik/pynode.git
#

import struct
import socket,socks
from secrets import token_bytes
import time
import sys
import threading
from io import BytesIO
from binascii import unhexlify
import argparse

import bitcoin
from bitcoin.core import CTransaction, b2lx
from bitcoin.core.serialize import Hash
from bitcoin.messages import msg_version, msg_inv, msg_ping, msg_verack, msg_pong, msg_tx, messagemap, MsgSerializable, MSG_TX, MSG_BLOCK
from bitcoin.net import CInv

from random import shuffle

# needed for QR code reading
import cv2
from ur.ur_decoder import URDecoder
from cbor2 import loads
# needed for QR code reading

# define constants
MIN_PROTO_VERSION = 60001 # Must support BIP0031 (ping/pong)
PROTO_VERSION = 70015 # Supports BIP0031
MY_SUBVERSION = b"/pynode:0.0.1/"
TorProxy='127.0.0.1:9050'


# setup logging

import logging

def addLoggingLevel(levelName, levelNum, methodName=None):      # from https://stackoverflow.com/questions/2183233/how-to-add-a-custom-loglevel-to-pythons-logging-facility/35804945#35804945
    """
    Comprehensively adds a new logging level to the `logging` module and the
    currently configured logging class.

    `levelName` becomes an attribute of the `logging` module with the value
    `levelNum`. `methodName` becomes a convenience method for both `logging`
    itself and the class returned by `logging.getLoggerClass()` (usually just
    `logging.Logger`). If `methodName` is not specified, `levelName.lower()` is
    used.

    To avoid accidental clobberings of existing attributes, this method will
    raise an `AttributeError` if the level name is already an attribute of the
    `logging` module or if the method name is already present 

    Example
    -------
    >>> addLoggingLevel('TRACE', logging.DEBUG - 5)
    >>> logging.getLogger(__name__).setLevel("TRACE")
    >>> logging.getLogger(__name__).trace('that worked')
    >>> logging.trace('so did this')
    >>> logging.TRACE
    5

    """
    if not methodName:
        methodName = levelName.lower()

    if hasattr(logging, levelName):
       raise AttributeError('{} already defined in logging module'.format(levelName))
    if hasattr(logging, methodName):
       raise AttributeError('{} already defined in logging module'.format(methodName))
    if hasattr(logging.getLoggerClass(), methodName):
       raise AttributeError('{} already defined in logger class'.format(methodName))

    # This method was inspired by the answers to Stack Overflow post
    # http://stackoverflow.com/q/2183233/2988730, especially
    # http://stackoverflow.com/a/13638084/2988730
    def logForLevel(self, message, *args, **kwargs):
        if self.isEnabledFor(levelNum):
            self._log(levelNum, message, args, **kwargs)
    def logToRoot(message, *args, **kwargs):
        logging.log(levelNum, message, *args, **kwargs)

    logging.addLevelName(levelNum, levelName)
    setattr(logging, levelName, levelNum)
    setattr(logging.getLoggerClass(), methodName, logForLevel)
    setattr(logging, methodName, logToRoot)

# add more logging levels
addLoggingLevel('INFO2', logging.INFO - 1)
addLoggingLevel('INFO3', logging.INFO2 - 1)
addLoggingLevel('INFO4', logging.INFO3 - 1)
addLoggingLevel('TRACE', logging.DEBUG - 5)

# set the logging format
logging.basicConfig(format='%(levelname)-8s:  %(message)s')

# get level names and their values
LogLevelChoicesDictionary=logging._nameToLevel.copy()           # logging.getLevelNamesMapping() does not exist yet in python 3.10

# remove some duplicate default values and unneeded values to simplify help
LogLevelChoicesDictionary.pop('FATAL')
LogLevelChoicesDictionary.pop('WARN')
LogLevelChoicesDictionary.pop('CRITICAL')
LogLevelChoicesDictionary.pop('NOTSET')

# sort by value and then extract the names
LogLevelChoices=tuple(zip(*sorted(LogLevelChoicesDictionary.items(), key=lambda x: x[1])))[0]






# Node connection #
class NodeConn(threading.Thread):
    def __init__(self, dstaddr, dstport, peermgr):
        threading.Thread.__init__(self)
        self.dst = (dstaddr, dstport)
        self.peermgr = peermgr
        self.proxy = peermgr.proxy
        self.proxyrandomize=peermgr.proxyrandomize
        self.params = peermgr.params
        self.transactions = peermgr.payload

        self.recvbuf = b""
        self.ver_send = MIN_PROTO_VERSION
        self.ver_recv = MIN_PROTO_VERSION
        self.last_sent = 0
        self.dstname = '%s:%i' % self.dst
        self.sock = None
        self.stopping=False

    def run(self):
        logging.info3("connecting to %s" % (self.dstname))

        try:
            # not using `create_connection` because that does not return the `sock` object until connection completes and the `sock.shutdown` and `sock.close` functions then can't work with the `join_all` function.
            # could use a timeout on the socket itself, but this seems a bit more general.
            # also, socks version of `create_connection` doesn't fall back to regular sockets when proxy_type=None, so that makes things less general (but actually still shorter) having to make two seperate calls
            self.sock = socks.socksocket()

            if self.proxy is not None:
                (proxy_addr, proxy_port)=parse_host_port(self.proxy, None)

                if self.proxyrandomize:
                    # randomize the username and password supplied to the SOCKS5 proxy for each socket in order to signal that separate streams should be used for each socket.
                    # see also, https://spec.torproject.org/proposals/171-separate-streams.html
                    username=token_bytes(16).hex()
                    password=token_bytes(16).hex()
                else:
                    username=None
                    password=None

                self.sock.set_proxy(proxy_type=socks.SOCKS5,addr=proxy_addr,port=proxy_port,username=username,password=password)

            self.sock.connect(self.dst)

        except socks.ProxyConnectionError:
            # it is not just that this particular node is unavailable, the local proxy is not working, so all nodes will fail and we want to actually show an error at higher log levels and stop this thread.
            ErrorMessage='unable to connect to SOCKS5 proxy '+self.proxy
            if self.proxy==TorProxy:
                ErrorMessage+=', do you have TOR installed and running?'
            logging.error(ErrorMessage)
            self.sock=None
            return

        except Exception as e:
            if self.stopping:
                logging.info4("never actually connected to %s:%i (%s)" % (self.dst[0], self.dst[1], e))
            else:
                logging.info4("error connecting to %s:%i (%s)" % (self.dst[0], self.dst[1], e))
                self.stop()
            return

        # stuff version msg into sendbuf
        vt = msg_version(PROTO_VERSION)
        vt.nServices = 0
        if self.dst[0].endswith('.onion'):
            vt.addrTo.ip = '0.0.0.0' # XXX encode onion into IP like bitcoind does
        else:
            vt.addrTo.ip = self.dst[0]
        vt.addrTo.port = self.dst[1]
        vt.addrFrom.ip = "0.0.0.0"
        vt.addrFrom.port = 0
        vt.nStartingHeight = 0
        vt.strSubVer = MY_SUBVERSION
        self.send_message(vt)

        logging.info3("connected to " + self.dstname)
        while True:
            try:
                t = self.sock.recv(8192)
                if len(t) <= 0:
                    raise ValueError
            except (IOError, ValueError):
                self.stop()
                return
            self.recvbuf += t
            self.got_data()

    def stop(self):
        self.stopping=True
        if not self.sock:
            return
        logging.info3("closing " + self.dstname)
        self.recvbuf = b""
        try:
            self.sock.shutdown(socket.SHUT_RDWR)
            self.sock.close()
        except:
            pass
        self.sock = None

    def got_data(self):
        while True:
            if len(self.recvbuf) < 4:
                return
            if self.recvbuf[:4] != self.params.MESSAGE_START:
                raise ValueError("got garbage %s" % repr(self.recvbuf))
            # check checksum
            if len(self.recvbuf) < 4 + 12 + 4 + 4:
                return
            command = self.recvbuf[4:4 + 12].split(b"\x00", 1)[0]
            msglen = struct.unpack("<i", self.recvbuf[4 + 12:4 + 12 + 4])[0]
            checksum = self.recvbuf[4 + 12 + 4:4 + 12 + 4 + 4]
            if len(self.recvbuf) < 4 + 12 + 4 + 4 + msglen:
                return
            msg = self.recvbuf[:4 + 12 + 4 + 4 + msglen]
            self.recvbuf = self.recvbuf[4 + 12 + 4 + 4 + msglen:]

            if command in messagemap:
                t = MsgSerializable.stream_deserialize(BytesIO(msg), self.ver_recv)
                self.got_message(t)
            else:
                logging.debug("UNKNOWN COMMAND %s %s" % (command, repr(msg)))

    def send_message(self, message):
        logging.debug("send %s" % repr(message))

        tmsg = message.to_bytes()

        try:
            self.sock.sendall(tmsg)
            self.last_sent = time.time()
        except:
            self.stop()

    def start_broadcast(self):
        logging.info3('Starting broadcast')
        msg = msg_inv()
        for h in self.transactions.keys():
            inv = CInv()
            inv.type = MSG_TX
            inv.hash = h
            msg.inv.append(inv)
        self.send_message(msg)

    def got_message(self, message):
        if self.last_sent + 30 * 60 < time.time():
            self.send_message(msg_ping(self.ver_send))

        if message.command == b"reject":
            logging.trace("recv %s" % (repr(message)))
        else:
            logging.trace("recv %s" % repr(message))

        if message.command == b"version":
            self.ver_send = min(PROTO_VERSION, message.nVersion)
            if self.ver_send < MIN_PROTO_VERSION:
                logging.debug(
                    "Obsolete version %d, closing" % (self.ver_send,))
                self.stop()
                return

            self.send_message(msg_verack(self.ver_send))

            self.start_broadcast()

        elif message.command == b"verack":
            self.ver_recv = self.ver_send

        elif message.command == b"ping":
            self.send_message(msg_pong(self.ver_send, message.nonce))

        elif message.command == b"getdata":
            self.getdata(message)

        # TODO: count rejects

    def getdata_tx(self, txhash):
        logging.trace('getdata_tx %s' % b2lx(txhash))
        if txhash in self.transactions:
            msg = msg_tx()
            msg.tx = self.transactions[txhash]
            self.send_message(msg)
            self.peermgr.tx_broadcasted(txhash)
        else:
            logging.debug('Peer requested unknown transaction')

    def getdata_block(self, blkhash):
        logging.debug('Peer requested block - this is unsupported')

    def getdata(self, message):
        if len(message.inv) > 50000:
            self.stop()
            return
        for inv in message.inv:
            if inv.type == MSG_TX:
                self.getdata_tx(inv.hash)
            elif inv.type == MSG_BLOCK:
                self.getdata_block(inv.hash)

class PeerManager(object):
    def __init__(self, proxy, proxyrandomize, params, payload):
        self.params = params
        self.peers = []
        self.tried = {}
        self.payload = payload
        self.stats = {x:0 for x in payload.keys()}
        self.proxy = proxy
        self.proxyrandomize=proxyrandomize

    def add(self, host, port):
        self.tried[host] = True
        c = NodeConn(host, port, self)
        self.peers.append(c)
        c.start()

    def close_all(self):
        for peer in self.peers:
            peer.stop()
        self.peers = []

    def tx_broadcasted(self, txhash):
        self.stats[txhash] += 1

# Miscelleneous utility functions #
def join_all(threads, timeout):
    '''
    Join a bunch of threads, with timeout.
    '''
    wait_until = time.time() + timeout
    alive = len(threads)
    while alive:
        alive = 0
        for t in threads:
            next_wait = wait_until - time.time()
            if next_wait <= 0:
                return
            t.join(next_wait)
            alive += t.is_alive()

def parse_host_port(node, default_port):
    '''
    Parse host:port tuple.
    TODO: [::]:12345 IPv6 syntax.
    '''
    (host, _, port) = node.partition(':')
    if port:
        port = int(port)
    else:
        if default_port is None:
            raise ValueError('Must provide port in %s' % node)
        port = default_port
    return (host,port)


def AlwaysPrintIfNotTrueElseLogInfo3(Test,String):
    if not Test:
        print(String)
    else:
        logging.info3(String)



# Main program logic #

def parse_args():
    parser = argparse.ArgumentParser(description="Bitcoin Transaction Submission Tool",formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--loglevel', help='Set the log level. Choose WARNING or ERROR to receive no output under normal circumstances. Note: most log levels do not show connection failures as we can many times have a successful broadcast when only a small number of the total nodes that were contacted received the broadcast transaction(s). Use TRACE, DEBUG, or INFO4 to see connection failures.', type=str, choices=LogLevelChoices,default='INFO')
    parser.add_argument('--proxy', '-p', help='SOCKS5 proxy to connect through. Set to `None` to not use a proxy.', default=TorProxy)
    parser.add_argument('--proxyrandomize', help='If SOCKS5 proxy is defined, assume it is TOR and use stream isolation.',default=True,action=argparse.BooleanOptionalAction)
    parser.add_argument('--timeout', '-t', help='Number of seconds to wait before disconnecting from nodes', type=int, default=30)
    parser.add_argument('--network', help='Network to connect to (mainnet, regtest, testnet). This also determines the default port',default='mainnet')
    parser.add_argument('--nodes', help='List of nodes to connect to, denoted either host or host:port, separated by commas. If None and `nodes-file` is also None, DNS seeds will be used to populate the node list.',default=None)
    parser.add_argument('--nodes-file', '-n', help='Read list of nodes from file (either host or host:port, separated one per line)', default=None)
    parser.add_argument('--max-nodes',help='Max number of nodes to use in the node list. Set to 0 to select all nodes.',type=int,default=35)
    parser.add_argument('--tx-file', '-r', help='Read list of transactions from file (encoded as hex, separated one per line)', default=None)
    parser.add_argument('--QR-scan', help='Scan a QR code of a signed transaction from Sparrow Wallet. Note: This option is not compatible with passing transactions on the command line or when using a `tx-file`.',default=False,action='store_true')
    parser.add_argument('--camera-id', help='Camera id of the camera that you would like to use to scan a QR code with.',type=int,default='0')
    parser.add_argument('--camera-resolution', help='Camera resolution that you would like to use to scan a QR code with.',default='1280x720')
    parser.add_argument('--camera-mirrored', help='Mirror the camera when scanning QR codes.',default=False,action='store_true')
    parser.add_argument('--yes','-y', help='Do not prompt to review and confirm transactions before submitting.',default=False,action='store_true')
    parser.add_argument('transactions', help='Serialized transactions (encoded as hex, separated by commas) to broadcast. If None, `tx-file` is also None, and `--QR-scan` is not used, you will be prompted to enter (useful if you do not want the transactions stored in your `.bash_history` file).',default=None,nargs='?')
    return parser.parse_args()

def read_lines(filename):
    with open(filename, 'r') as f:
        lines = [line.strip() for line in f]
        lines = [line for line in lines if line]
    return lines


def main():
    args = parse_args()

    logging.getLogger().setLevel(args.loglevel)

    if logging.INFO >= logging.root.level:
        print()

    timeout = args.timeout

    if args.proxy.lower()=='none':
        proxy = None
    else:
        logging.info2("using SOCKS5 proxy "+args.proxy)
        proxy = args.proxy

        if args.proxyrandomize:
            logging.info2("Using TOR stream isolation")
        else:
            logging.info2("Not using TOR stream isolation")

    try:
        bitcoin.SelectParams(args.network)
    except:
        logging.error("invalid network %s" % args.network)
        sys.exit(1)
    params = bitcoin.params


    # build transactions list

    # get transactions from the command line
    hex_transactions = args.transactions.split(',') if args.transactions else []
    logging.info2('Read %d transactions from the command line.' % (len(hex_transactions)))

    # get transactions from tx_File
    if args.tx_file:
        lines = read_lines(args.tx_file)
        logging.info2('Read %d transactions from %s.' % (len(lines), args.tx_file))
        hex_transactions += lines
    else:
        logging.info2('No `tx-file` defined.')


    if args.QR_scan and len(hex_transactions)==0:
        print('No transactions passed on the command line or in a `tx-file` to broadcast and `--QR-scan` used.')
        print('Using camera to scan QR code.')

        logging.info2('Camera resolution set to '+args.camera_resolution)
        (width, height) = [int(x) for x in args.camera_resolution.split('x')]

        # setup camera capture
        capture = cv2.VideoCapture(args.camera_id)
        logging.info2('Using camera id '+str(args.camera_id))
        capture.set(cv2.CAP_PROP_FRAME_WIDTH, width)
        capture.set(cv2.CAP_PROP_FRAME_HEIGHT, height)

        # setup QR code decoder
        detector = cv2.QRCodeDetector()

        # setup UR decoder
        decoder = URDecoder()

        # open a window for previewing the camera
        BaseWindowName='Scan Signed Transaction QR Code From Sparrow Wallet'
        if args.camera_mirrored:
            logging.info2('Mirroring the camera image preview.')
        # documentation for these WND and WINDOW flags is very confusing ! ! ! !
        cv2.namedWindow(BaseWindowName, cv2.WINDOW_GUI_NORMAL)
        cv2.setWindowProperty(BaseWindowName, cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_NORMAL)
        cv2.setWindowProperty(BaseWindowName, cv2.WND_PROP_AUTOSIZE, cv2.WINDOW_NORMAL)
        AspectRatio=width/height
        InitialWindowWidth=1000
        cv2.resizeWindow(BaseWindowName,InitialWindowWidth,int(InitialWindowWidth/AspectRatio))
        cv2.moveWindow(BaseWindowName,20,20)

        while True:

            # read the image frame from the camera
            _, image = capture.read()

            # detect and decode the QR code
            QR_data, _, _ = detector.detectAndDecode(image) 

            # preview what the camera is seeing so you can aim properly
            if args.camera_mirrored:
                image=cv2.flip(image, 1)
            cv2.imshow(BaseWindowName, image)

            # show % complete in the camera preview window title for animated QR codes
            cv2.setWindowTitle(BaseWindowName, BaseWindowName+" ("+str(int(round(decoder.estimated_percent_complete() * 100)))+"% complete)")

            # figure out if the user wants to cancel scanning and quit
            KeyPressed=cv2.waitKey(1)
            if KeyPressed == ord("q") or KeyPressed == 27 or cv2.getWindowProperty(BaseWindowName, cv2.WND_PROP_VISIBLE) == 0:      # 27 is ESC
                print('Camera window closed.')
                break

            if QR_data:		# there is a QRCode in the image

                # process the new data. if the QR code doesn't include UR encoded data, it seems to be just ignored.
                decoder.receive_part(QR_data)

                if decoder.is_complete():
                    if decoder.result.type=='bytes':
                        hex_transactions += [loads(decoder.result.cbor).hex()]
                    else:
                        logging.error('Invalid data type received from QR code')

                    break

        capture.release() 
        cv2.destroyAllWindows()

    elif args.QR_scan and len(hex_transactions)!=0:
        logging.error('The `--QR-scan` option is not compatible with passing transactions on the command line or when using a `tx-file`.')
        exit(1)
    elif len(hex_transactions)==0:
        print()
        UserInput = input('No transactions passed on the command line or in a `tx-file` to broadcast and `--QR-scan` not used.\n\nPlease enter the serialized transactions (encoded as hex, separated by commas) that you would like to broadcast:\n\n')
        if UserInput !='':
            hex_transactions += UserInput.split(',')
        print()

    if hex_transactions:
        transactions = {}
        AlwaysPrintIfNotTrueElseLogInfo3(args.yes,'\nThe following transactions are about to be submitted:\n')
        for txdata in hex_transactions:
            txdata = unhexlify(txdata)
            tx = CTransaction.deserialize(txdata)
            transactions[tx.GetTxid()] = tx             # this approach also happens to remove duplicate transactions
            AlwaysPrintIfNotTrueElseLogInfo3(args.yes,'txid: '+tx.GetTxid()[::-1].hex()+'\ntx_hex: \n'+txdata.hex()+'\n\n')
        if not args.yes and input('Would you like to continue? Please enter the word `yes` to continue, anything else to abort: ').lower()!='yes':
            logging.error('`yes` not received, aborting.')
            exit(1)
    else:
        logging.error('nothing was input to broadcast, aborting')
        exit(1)

    # parse nodes list
    nodes=[]

    if args.nodes is not None:
        nodes += [parse_host_port(node, params.DEFAULT_PORT) for node in args.nodes.split(",")]
        logging.info2('Read %d nodes from the command line' % (len(nodes)))

    if args.nodes_file is not None:
        lines = read_lines(args.nodes_file)
        nodes += [parse_host_port(node, params.DEFAULT_PORT) for node in lines]
        logging.info2('Read %d nodes from %s' % (len(lines), args.nodes_file))

    if len(nodes)==0:
        logging.info2('no nodes passed on the command line or in a `nodes-file`, looking in DNS seeds')
        seeds=list(map(lambda x: x[1], params.DNS_SEEDS))
        addresses=[]
        for seed in seeds:
            try:
                NewAddresses=list(map( lambda x: x[4][0],socket.getaddrinfo(host=seed, port=0, family=socket.AF_INET, type=socket.SOCK_STREAM)))
                logging.info2('got '+str(len(NewAddresses))+' nodes from '+seed)
                addresses+=NewAddresses
            except:
                logging.info4('can not get any nodes from '+seed)

        logging.info2('got a total of '+str(len(addresses))+ ' nodes from DNS seeds')
        nodes += [parse_host_port(node, params.DEFAULT_PORT) for node in addresses]

    # remove duplicate nodes
    nodes=list(set(nodes))

    # randomize node list so we don't get all nodes from the same DNS seed
    shuffle(nodes)

    if args.max_nodes>0 and args.max_nodes<len(nodes):
        logging.info2('limiting to a maximum of '+str(args.max_nodes)+' nodes')
        nodes=nodes[:args.max_nodes]

    logging.info2('using a total of '+str(len(nodes))+ ' unique nodes from all sources')


    logging.info("Attempting broadcast of %i transactions to %i peers in %i seconds" % (len(transactions), len(nodes), timeout))

    peermgr = PeerManager(proxy, args.proxyrandomize, params, transactions)

    # connect to specified remote node(s)
    for host,port in nodes:
        peermgr.add(host, port)

    try:
        join_all(peermgr.peers, timeout)
    finally:
        peermgr.close_all()
        join_all(peermgr.peers, timeout)


    if logging.INFO >= logging.root.level:
        print()
    logging.info('Successful Broadcasts:')
    logging.info('                            TXID                                           Peers')

    total = 0
    for (txhash, count) in peermgr.stats.items():
        logging.info('  %s        %4i' % (b2lx(txhash), count))
        total += count

    if logging.INFO >= logging.root.level:
        print()


    # non-zero exit status if at least one succesful submit
    exit(total == 0)

if __name__ == '__main__':
    main()

